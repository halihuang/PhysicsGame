//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""2181b0a1-144f-41c1-8ee2-bb940bdc3dcd"",
            ""actions"": [
                {
                    ""name"": ""Rotate1"",
                    ""type"": ""Button"",
                    ""id"": ""a6066c4a-f4a9-4993-a97b-eb2d317fba28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate2"",
                    ""type"": ""Button"",
                    ""id"": ""66986cd3-3859-40ec-b3d3-25076d3d7e22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Force1"",
                    ""type"": ""Button"",
                    ""id"": ""2e78864c-6626-4b48-be2f-f72a126b309d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Force2"",
                    ""type"": ""Button"",
                    ""id"": ""a636ed71-d232-40ac-9ee5-65b401c95524"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""da1b1f78-faac-4654-af9c-317f047f652b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e5431e82-b373-47a1-90b4-df23cbd39e63"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0f0638d5-b7db-476c-a039-0d9a48665c57"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9c8e37ea-f79e-4f7c-8af5-eaabeecf65d3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Force1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c0548cbf-89b3-44c4-a3f0-e32a2ca99325"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b6f3c89f-c7fe-44bb-b4cc-0258ddf0ec16"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""15a4be87-1a6d-439c-935b-57e8d4fe511f"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""db889b10-453f-41f0-80dd-2bcd6623e551"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Force2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": []
        }
    ]
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_Rotate1 = m_PlayerMap.FindAction("Rotate1", throwIfNotFound: true);
        m_PlayerMap_Rotate2 = m_PlayerMap.FindAction("Rotate2", throwIfNotFound: true);
        m_PlayerMap_Force1 = m_PlayerMap.FindAction("Force1", throwIfNotFound: true);
        m_PlayerMap_Force2 = m_PlayerMap.FindAction("Force2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private List<IPlayerMapActions> m_PlayerMapActionsCallbackInterfaces = new List<IPlayerMapActions>();
    private readonly InputAction m_PlayerMap_Rotate1;
    private readonly InputAction m_PlayerMap_Rotate2;
    private readonly InputAction m_PlayerMap_Force1;
    private readonly InputAction m_PlayerMap_Force2;
    public struct PlayerMapActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerMapActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate1 => m_Wrapper.m_PlayerMap_Rotate1;
        public InputAction @Rotate2 => m_Wrapper.m_PlayerMap_Rotate2;
        public InputAction @Force1 => m_Wrapper.m_PlayerMap_Force1;
        public InputAction @Force2 => m_Wrapper.m_PlayerMap_Force2;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Add(instance);
            @Rotate1.started += instance.OnRotate1;
            @Rotate1.performed += instance.OnRotate1;
            @Rotate1.canceled += instance.OnRotate1;
            @Rotate2.started += instance.OnRotate2;
            @Rotate2.performed += instance.OnRotate2;
            @Rotate2.canceled += instance.OnRotate2;
            @Force1.started += instance.OnForce1;
            @Force1.performed += instance.OnForce1;
            @Force1.canceled += instance.OnForce1;
            @Force2.started += instance.OnForce2;
            @Force2.performed += instance.OnForce2;
            @Force2.canceled += instance.OnForce2;
        }

        private void UnregisterCallbacks(IPlayerMapActions instance)
        {
            @Rotate1.started -= instance.OnRotate1;
            @Rotate1.performed -= instance.OnRotate1;
            @Rotate1.canceled -= instance.OnRotate1;
            @Rotate2.started -= instance.OnRotate2;
            @Rotate2.performed -= instance.OnRotate2;
            @Rotate2.canceled -= instance.OnRotate2;
            @Force1.started -= instance.OnForce1;
            @Force1.performed -= instance.OnForce1;
            @Force1.canceled -= instance.OnForce1;
            @Force2.started -= instance.OnForce2;
            @Force2.performed -= instance.OnForce2;
            @Force2.canceled -= instance.OnForce2;
        }

        public void RemoveCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IPlayerMapActions
    {
        void OnRotate1(InputAction.CallbackContext context);
        void OnRotate2(InputAction.CallbackContext context);
        void OnForce1(InputAction.CallbackContext context);
        void OnForce2(InputAction.CallbackContext context);
    }
}
